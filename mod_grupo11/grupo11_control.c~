#include "module.h"
#include <pthread.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <semaphore.h>
#define ROCKSSIZE 8
/**
* Alunos: Hiago Medeiros e Rodrigo Schmitz
**/
pthread_t threads[PROCESSORS_COUNT];
pthread_t reader;
int rocks[ROCKSSIZE];
int cancelled;
int setup = 0;
int i, f, contador;


pthread_mutex_t deliver;
pthread_mutex_t ctrlRocks;
pthread_cond_t hasRocks;
pthread_cond_t hasSpace;

static void* worker(void* ignored)
{
    while (cancelled == 0)
    {
        rock_t rock = takeRock();

        oil_t oil = pd_process(rock);

        pthread_mutex_lock(&deliver);
        pd_deliver(oil);
        pthread_mutex_unlock(&deliver);
    }
    return NULL;
}

static void* readRock(void* ignored)
{
    while(cancelled == 0)
    {
        rock_t rock = pd_read();
        storeRock(rock);
    }
}

rock_t takeRock()
{
    pthread_mutex_lock(&ctrlRocks);
    while(contador == 0)
    {
        pthread_cond_wait(&hasRocks, &ctrlRocks);
    }
    i = (i+1)%ROCKSSIZE;
    rock_t rock = rocks[i];
    contador--;
    pthread_mutex_unlock(&ctrlRocks);
    pthread_cond_signal(&hasSpace);
    return rock;

}

void storeRock(rock_t rock)
{

    pthread_mutex_lock(&ctrlRocks);
    while(contador == ROCKSSIZE)
    {
        pthread_cond_wait(&hasSpace, &ctrlRocks);       
    }
    f = (f+1)%ROCKSSIZE;
    rocks[f] = rock;
    contador++;
    pthread_mutex_unlock(&ctrlRocks);
    pthread_cond_signal(&hasRocks);
}

void mod_setup()
{

    assert(setup == 0);
    setup = 1;
    cancelled = 0;
    i = 0;
    f = 0;
    contador = 0;
    pthread_mutex_init(&deliver, NULL);
    pthread_mutex_init(&ctrlRocks, NULL);
    pthread_cond_init(&hasRocks, NULL);
    pthread_cond_init(&hasSpace, NULL);
    pthread_create(&reader, NULL, readRock, NULL);

    int i;
    for(i = 0; i < PROCESSORS_COUNT; i++)
    {
        pthread_create(&threads[i], NULL, worker, NULL);
    }

}

char* mod_name()
{
    return "grupo11_control";
}

void mod_shutdown()
{
    assert(setup == 1);
    cancelled = 1;

    int i;
    for(i = 0; i < PROCESSORS_COUNT; i++)
    {
        pthread_join(threads[i], NULL);
    }

    pthread_join(reader, NULL);
    pthread_mutex_destroy(&deliver);
    pthread_mutex_destroy(&ctrlRocks);
    pthread_cond_destroy(&hasRocks);
    pthread_cond_destroy(&hasSpace);

}
